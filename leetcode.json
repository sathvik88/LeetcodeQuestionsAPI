[
  {
    "Question" : "Contains Duplicate",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0217-contains-duplicate.py",
    "Prompt": "Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct."
  },
  {
    "Question" : "Valid Anagram",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0242-valid-anagram.py",
    "Prompt": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.
    An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."

  },
  {
    "Question" : "Two Sum",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0001-two-sum.py",
    "Prompt": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
    You may assume that each input would have exactly one solution, and you may not use the same element twice.
    You can return the answer in any order."

  },
  {
    "Question" : "Group Anagrams",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0049-group-anagrams.py",
    "Prompt": "Given an array of strings strs, group the anagrams together.
    An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
    You can return the answer in any order."

  },
  {
    "Question" : "Top K Frequent Elements",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0347-top-k-frequent-elements.py",
    "Prompt": "Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order."

  },
  {
    "Question" : "Product of Array Except Self",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0238-product-of-array-except-self.py",
    "Prompt": "Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
    The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
    You must write an algorithm that runs in O(n) time and without using the division operation."

  },
  {
    "Question" : "Valid Sudoku",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0036-valid-sudoku.py",
    "Prompt": "Determine if a 9 x 9 Sudoku board is valid.
    Only the filled cells need to be validated according to the following rules:
    Each row must contain the digits 1-9 without repetition.
    Each column must contain the digits 1-9 without repetition.
    Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition."
  },
  {
    "Question" : "Encode and Decode Strings",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0271-encode-and-decode-strings.py",
    "Prompt": "Design an algorithm to encode a list of strings to a string.
    The encoded string is then sent over the network and is decoded back to the original list of strings."

  },
  {
    "Question" : "Longest Consecutive Sequence",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0128-longest-consecutive-sequence.py",
    "Prompt": "Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence."

  },
  {
    "Question" : "Valid Palindrome",
    "Categorie" : "Two Pointers",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0125-valid-palindrome.py",
    "Prompt": "A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and removing all non-alphanumeric characters, it reads the same forward and backward.
    Alphanumeric characters include letters and numbers. Given a string s, return true if it is a palindrome, or false otherwise."

  },
  {
    "Question" : "Two Sum II",
    "Categorie" : "Two Pointers",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0167-two-sum-ii-input-array-is-sorted.py",
    "Prompt": "Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number.
    Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.
    length. Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.
    The tests are generated such that there is exactly one solution.
    You may not use the same element twice."

  },
  {
    "Question" : "3Sum",
    "Categorie" : "Two Pointers",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0015-3sum.py",
    "Prompt": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
    Notice that the solution set must not contain duplicate triplets."

  },
  {
    "Question" : "Container with Most Water",
    "Categorie" : "Two Pointers",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0011-container-with-most-water.py",
    "Prompt": "You are given an integer array height of length n.
    There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).
    Find two lines that together with the x-axis form a container, such that the container contains the most water.
    Return the maximum amount of water a container can store."
  },
  {
    "Question" : "Trapping Rain Water",
    "Categorie" : "Two Pointers",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0042-trapping-rain-water.py",
    "Prompt": "Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining."

  },
  {
    "Question" : "Best Time to Buy & Sell Stocks",
    "Categorie" : "Sliding Window",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0121-best-time-to-buy-and-sell-stock.py",
    "Prompt": "You are given an array prices where prices[i] is the price of a given stock on the ith day.
    You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
    Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0."

  },
  {
    "Question" : "Longest Substring W/O Repeating Chars",
    "Categorie" : "Sliding Window",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0003-longest-substring-without-repeating-characters.py",
    "Prompt": "Given a string s, find the length of the longest substring without repeating characters."

  },
  {
    "Question" : "Longest Repeating Char Replacement",
    "Categorie" : "Sliding Window",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0424-longest-repeating-character-replacement.py",
    "Prompt": "You are given a string s and an integer k.
    You can choose any character of the string and change it to any other uppercase English character.
    You can perform this operation at most k times.
    Return the length of the longest substring containing the same letter you can get after performing the above operations."

  },
  {
    "Question" : "Permutation In String",
    "Categorie" : "Sliding Window",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0567-permutation-in-string.py",
    "Prompt": "Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.
    In other words, return true if one of s1's permutations is the substring of s2."

  },
  {
    "Question" : "Minimum Window Substring",
    "Categorie" : "Sliding Window",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0076-minimum-window-substring.py",
    "Prompt": "Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included in the window.
    If there is no such substring, return the empty string.
    The testcases will be generated such that the answer is unique."

  },
  {
    "Question" : "Sliding Window Maximum",
    "Categorie" : "Sliding Window",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0239-sliding-window-maximum.py",
    "Prompt": "You are given an array of integers nums, there is a sliding window of size k which is moving from the very left of the array to the very right.
    You can only see the k numbers in the window. Each time the sliding window moves right by one position.
    Return the max sliding window."

  },
  {
    "Question" : "Valid Parentheses",
    "Categorie" : "Stack",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0020-valid-parentheses.py",
    "Prompt": " "

  },
  {
    "Question" : "Min Stack",
    "Categorie" : "Stack",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0155-min-stack.py",
    "Prompt": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
    Implement the MinStack class:
    MinStack() initializes the stack object.
    void push(int val) pushes the element val onto the stack.
    void pop() removes the element on the top of the stack.
    int top() gets the top element of the stack.
    int getMin() retrieves the minimum element in the stack.
    You must implement a solution with O(1) time complexity for each function."

  },
  {
    "Question" : "Evaluate Reverse Polish Notation",
    "Categorie" : "Stack",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0150-evaluate-reverse-polish-notation.py",
    "Prompt": "Given an integer array nums, return true if any value appears at least t"

  },
  {
    "Question" : "Car Fleet",
    "Categorie" : "Stack",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0853-car-fleet.py",
    "Prompt":  " "

  },
  {
    "Question" : "Daily Temperatures",
    "Categorie" : "Stack",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0739-daily-temperatures.py",
    "Prompt": " "

  },
  {
    "Question" : "Generate Parentheses",
    "Categorie" : "Stack",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0022-generate-parentheses.py",
    "Prompt": " "

  },
  {
    "Question" : "Largest Rectangle in Histogram",
    "Categorie" : "Stack",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0084-largest-rectangle-in-histogram.py",
    "Prompt": " "

  },
  {
    "Question" : "Binary Search",
    "Categorie" : "Binary Search",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0704-binary-search.py",
    "Prompt": " "

  },
  {
    "Question" : "Search 2D Matrix",
    "Categorie" : "Binary Search",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0074-search-a-2d-matrix.py",
    "Prompt": " "

  },
  {
    "Question" : "Koko Eating Bananas",
    "Categorie" : "Binary Search",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0875-koko-eating-bananas.py",
    "Prompt": " "

  },
  {
    "Question" : "Search Rotated Sorted Array",
    "Categorie" : "Binary Search",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0033-search-in-rotated-sorted-array.py",
    "Prompt": " "

  },
  {
    "Question" : "Find Min in Rotated Sorted Array",
    "Categorie" : "Binary Search",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0153-find-minimum-in-rotated-sorted-array.py",
    "Prompt": " "

  },
  {
    "Question" : "Time Based Key-Value Store",
    "Categorie" : "Binary Search",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0981-time-based-key-value-store.py",
    "Prompt": " "

  },
  {
    "Question" : "Find Median of Two Sorted Arrays",
    "Categorie" : "Binary Search",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0004-median-of-two-sorted-arrays.py",
    "Prompt": " "

  },
  {
    "Question" : "Reverse Linked List",
    "Categorie" : "Linked List",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0206-reverse-linked-list.py",
    "Prompt": " "

  },
  {
    "Question" : "Merge Two Linked Lists",
    "Categorie" : "Linked List",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0021-merge-two-sorted-lists.py",
    "Prompt": " "

  },
  {
    "Question" : "Reorder List",
    "Categorie" : "Linked List",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0143-reorder-list.py",
    "Prompt": " "

  },
  {
    "Question" : "Remove Nth Node from End of List",
    "Categorie" : "Linked List",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0019-remove-nth-node-from-end-of-list.py",
    "Prompt": " "

  },
  {
    "Question" : "Copy List with Random Pointer",
    "Categorie" : "Linked List",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0138-copy-list-with-random-pointer.py",
    "Prompt": " "

  },
  {
    "Question" : "Add Two Numbers",
    "Categorie" : "Linked List",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0002-add-two-numbers.py",
    "Prompt": " "

  },
  {
    "Question" : "Linked Listy Cycle",
    "Categorie" : "Linked List",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0141-linked-list-cycle.py",
    "Prompt": " "

  },
  {
    "Question" : "Find the Duplicate Number",
    "Categorie" : "Linked List",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0287-find-the-duplicate-number.py",
    "Prompt": " "

  },
  {
    "Question" : "LRU Cache",
    "Categorie" : "Linked List",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0146-lru-cache.py",
    "Prompt": " "

  },
  {
    "Question" : "Merge K Sorted Lists",
    "Categorie" : "Linked List",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0023-merge-k-sorted-lists.py",
    "Prompt": " "

  },
  {
    "Question" : "Reverse Nodes in K-Group",
    "Categorie" : "Linked List",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0025-reverse-nodes-in-k-group.py",
    "Prompt": " "
  },
  {
    "Question" : "Invert Binary Tree",
    "Categorie" : "Trees",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0226-invert-binary-tree.py",
    "Prompt": " "
  },
  {
    "Question" : "Maximum Depth of Binary Tree",
    "Categorie" : "Trees",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0104-maximum-depth-of-binary-Tree.py",
    "Prompt": " "
  },
  {
    "Question" : "Diameter of a Binary Tree",
    "Categorie" : "Trees",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0543-diameter-of-binary-tree.py",
    "Prompt": " "
  },
  {
    "Question" : "Balanced Binary Tree",
    "Categorie" : "Trees",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0110-balanced-binary-tree.py",
    "Prompt": " "
  },
  {
    "Question" : "Same Tree",
    "Categorie" : "Trees",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0100-same-tree.py",
    "Prompt": " "
  },
  {
    "Question" : "Subtree of Another Tree",
    "Categorie" : "Trees",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0572-subtree-of-another-tree.py",
    "Prompt": " "
  },
  {
    "Question" : "Lowest Common Ancestor of a BST",
    "Categorie" : "Trees",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0235-lowest-common-ancestor-of-a-binary-search-tree.py",
    "Prompt": " "
  },
  {
    "Question" : "Binary Tree Level Order Traversal",
    "Categorie" : "Trees",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0102-binary-tree-level-order-traversal.py",
    "Prompt": " "
  },
  {
    "Question" : "Binary Tree Right Side View",
    "Categorie" : "Trees",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0199-binary-tree-right-side-view.py",
    "Prompt": " "
  },
  {
    "Question" : "Count Good Nodes in a Binary Tree",
    "Categorie" : "Trees",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1448-count-good-nodes-in-binary-tree.py",
    "Prompt": " "
  },
  {
    "Question" : "Validate a BST",
    "Categorie" : "Trees",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0098-validate-binary-search-tree.py",
    "Prompt": " "
  },
  {
    "Question" : "Kth Smallest Element in a BST",
    "Categorie" : "Trees",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0230-kth-smallest-element-in-a-bst.py",
    "Prompt": " "
  },
  {
    "Question" : "Construct Tree from Pre and Inorder Tree",
    "Categorie" : "Trees",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0105-construct-binary-tree-from-preorder-and-inorder-traversal.py",
    "Prompt": " "
  },
  {
    "Question" : "Implement Trie",
    "Categorie" : "Tries",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0208-implement-trie.py",
    "Prompt": " "
  },
  {
    "Question" : "Design Add and Search Word DS",
    "Categorie" : "Tries",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0211-design-add-and-search-words-data-structure.py",
    "Prompt": " "
  },
  {
    "Question" : "Word Search II",
    "Categorie" : "Tries",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0212-word-search-ii.py",
    "Prompt": " "
  },
  {
    "Question" : "Kth Largest Element in a Stream",
    "Categorie" : "Heap",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0703-kth-largest-element-in-a-stream.py",
    "Prompt": " "
  },
  {
    "Question" : "Last Stone Weight",
    "Categorie" : "Heap",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1046-last-stone-weight.py",
    "Prompt": " "
  },
  {
    "Question" : "K Closest Points to Origin",
    "Categorie" : "Heap",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0973-k-closest-points-to-origin.py",
    "Prompt": " "
  },
  {
    "Question" : "Kth Largest Element in an Array",
    "Categorie" : "Heap",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0215-kth-largest-element-in-an-array.py",
    "Prompt": " "
  },
  {
    "Question" : "Task Scheduler",
    "Categorie" : "Heap",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0621-task-scheduler.py",
    "Prompt": " "
  },
  {
    "Question" : "Design Twitter",
    "Categorie" : "Heap",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0355-design-twitter.py",
    "Prompt": " "
  },
  {
    "Question" : "Find Median from Data Stream",
    "Categorie" : "Heap",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0295-find-median-from-data-stream.py",
    "Prompt": " "
  },
  {
    "Question" : "Subsets",
    "Categorie" : "Backtracking",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0078-subsets.py",
    "Prompt": " "
  },
  {
    "Question" : "Combination Sum",
    "Categorie" : "Backtracking",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0039-combination-sum.py",
    "Prompt": " "
  },
  {
    "Question" : "Permutations",
    "Categorie" : "Backtracking",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0046-permutations.py",
    "Prompt": " "
  },
  {
    "Question" : "Subsets II",
    "Categorie" : "Backtracking",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0090-subsets-ii.py",
    "Prompt": " "
  },
  {
    "Question" : "Combination Sum II",
    "Categorie" : "Backtracking",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0040-combination-sum-ii.py",
    "Prompt": " "
  },
  {
    "Question" : "Word Search",
    "Categorie" : "Backtracking",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0079-word-search.py",
    "Prompt": " "
  },
  {
    "Question" : "Palindrome Partitioning",
    "Categorie" : "Backtracking",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0131-palindrome-partitioning.py",
    "Prompt": " "
  },
  {
    "Question" : "Letter Combinations of a Phone Number",
    "Categorie" : "Backtracking",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0017-letter-combinations-of-a-phone-number.py",
    "Prompt": " "
  },
  {
    "Question" : "N-Queens",
    "Categorie" : "Backtracking",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0051-n-queens.py",
    "Prompt": " "
  },
  {
    "Question" : "Number of Islands",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0200-number-of-islands.py",
    "Prompt": " "
  },
  {
    "Question" : "Clone Graph",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0133-clone-graph.py",
    "Prompt": " "
  },
  {
    "Question" : "Max Area of Island",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0695-max-area-of-island.py",
    "Prompt": " "
  },
  {
    "Question" : "Pacific Atlantic Waterflow",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0417-pacific-atlantic-waterflow.py",
    "Prompt": " "
  },
  {
    "Question" : "Surrounded Regions",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0130-surrounded-regions.py",
    "Prompt": " "
  },
  {
    "Question" : "Rotting Oranges",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0994-rotting-oranges.py",
    "Prompt": " "
  },
  {
    "Question" : "Walls and Gates",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0286-walls-and-gates.py",
    "Prompt": " "
  },
  {
    "Question" : "Course Schedule",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0207-course-schedule.py",
    "Prompt": " "
  },
  {
    "Question" : "Course Schedule II",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0210-course-schedule-ii.py",
    "Prompt": " "
  },
  {
    "Question" : "Redundant Connection",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0684-redundant-connection.py",
    "Prompt": " "
  },
  {
    "Question" : "Number of Connected Components in Graph",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0323-number-of-connected-components-in-an-undirected-graph.py",
    "Prompt": " "
  },
  {
    "Question" : "Graph Valid Tree",
    "Categorie" : "Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0261-graph-valid-tree.py",
    "Prompt": " "
  },
  {
    "Question" : "Word Ladder",
    "Categorie" : "Graphs",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0127-word-ladder.py",
    "Prompt": " "
  },
  {
    "Question" : "Reconstruct Itinerary",
    "Categorie" : "Advanced Graphs",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0332-reconstruct-itinerary.py",
    "Prompt": " "
  },
  {
    "Question" : "Min Cost to Connect all Points",
    "Categorie" : "Advanced Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1584-min-cost-to-connect-all-points.py",
    "Prompt": " "
  },
  {
    "Question" : "Network Delay Time",
    "Categorie" : "Advanced Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0743-network-delay-time.py",
    "Prompt": " "
  },
  {
    "Question" : "Swim in Rising Water",
    "Categorie" : "Advanced Graphs",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0778-swim-in-rising-water.py",
    "Prompt": " "
  },
  {
    "Question" : "Alien Dictionary",
    "Categorie" : "Advanced Graphs",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0269-alien-dictionary.py",
    "Prompt": " "
  },
  {
    "Question" : "Cheapest Flights Within K Stops",
    "Categorie" : "Advanced Graphs",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0787-cheapest-flights-within-k-stops.py",
    "Prompt": " "
  },
  {
    "Question" : "Climbing Stairs",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0070-climbing-stairs.py",
    "Prompt": " "
  },
  {
    "Question" : "Min Cost Climbing Stairs",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0746-min-cost-climbing-stairs.py",
    "Prompt": " "
  },
  {
    "Question" : "House Robber",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0198-house-robber.py",
    "Prompt": " "
  },
  {
    "Question" : "House Robber II",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0213-house-robber-ii.py",
    "Prompt": " "
  },
  {
    "Question" : "Longest Palindromic Substring",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0005-longest-palindromic-substring.py",
    "Prompt": " "
  },
  {
    "Question" : "Palindromic Substrings",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0647-palindromic-substrings.py",
    "Prompt": " "
  },
  {
    "Question" : "Decode Ways",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0091-decode-ways.py",
    "Prompt": " "
  },
  {
    "Question" : "Coin Change",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0322-coin-change.py",
    "Prompt": " "
  },
  {
    "Question" : "Maximum Product Subarray",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0152-maximum-product-subarray.py",
    "Prompt": " "
  },
  {
    "Question" : "Word Break",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0139-word-break.py",
    "Prompt": " "
  },
  {
    "Question" : "Longest Increasing Subsequence",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0300-longest-increasing-subsequence.py",
    "Prompt": " "
  },
  {
    "Question" : "Partial Equal Subset Sum",
    "Categorie" : "1-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0416-partition-equal-subset-sum.py",
    "Prompt": " "
  },
  {
    "Question" : "Unique Paths",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0062-unique-paths.py",
    "Prompt": " "
  },
  {
    "Question" : "Longest Common Subsequence",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1143-longest-common-subsequence.py",
    "Prompt": " "
  },
  {
    "Question" : "Best Time to Buy/Sell Stock Cooldown",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0309-best-time-to-buy-and-sell-stock-with-cooldown.py",
    "Prompt": " "
  },
  {
    "Question" : "Coin Change II",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0518-coin-change-2.py",
    "Prompt": " "
  },
  {
    "Question" : "Target Sum",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0494-target-sum.py",
    "Prompt": " "
  },
  {
    "Question" : "Interleaving String",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0097-interleaving-strings.py",
    "Prompt": " "
  },
  {
    "Question" : "Longest Increasing Path in a Matrix",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0329-longest-increasing-path-in-a-matrix.py",
    "Prompt": " "
  },
  {
    "Question" : "Distinct Subsequences",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0115-distinct-subsequences.py",
    "Prompt": " "
  },
  {
    "Question" : "Edit Distance",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0072-edit-distance.py",
    "Prompt": " "
  },
  {
    "Question" : "Burst Balloons",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0312-burst-balloons.py",
    "Prompt": " "
  },
  {
    "Question" : "Regular Expression Matching",
    "Categorie" : "2-D Dynamic Programming",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0010-regular-expression-matching.py",
    "Prompt": " "
  },
  {
    "Question" : "Maximum Subarray",
    "Categorie" : "Greedy",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0053-maximum-subarray.py",
    "Prompt": " "
  },
  {
    "Question" : "Jump Game",
    "Categorie" : "Greedy",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0055-jump-game.py",
    "Prompt": " "
  },
  {
    "Question" : "Jump Game II",
    "Categorie" : "Greedy",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0045-jump-game-ii.py",
    "Prompt": " "
  },
  {
    "Question" : "Gas Station",
    "Categorie" : "Greedy",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0134-gas-station.py",
    "Prompt": " "
  },
  {
    "Question" : "Hand of Striaght",
    "Categorie" : "Greedy",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0846-hand-of-straights.py",
    "Prompt": " "
  },
  {
    "Question" : "Merge Triplets to From Target Triplet",
    "Categorie" : "Greedy",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1899-merge-triplets-to-form-target-triplet.py",
    "Prompt": " "
  },
  {
    "Question" : "Partition Labels",
    "Categorie" : "Greedy",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0763-partition-labels.py",
    "Prompt": " "
  },
  {
    "Question" : "Valid Parenthesis String",
    "Categorie" : "Greedy", "Difficulty":
    "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0678-valid-parenthesis-string.py",
    "Prompt": " "
  },
  {
    "Question" : "Insert Interval",
    "Categorie" : "Intervals",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0057-insert-interval.py",
    "Prompt": " "
  },
  {
    "Question" : "Merge Intervals",
    "Categorie" : "Intervals",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0056-merge-intervals.py",
    "Prompt": " "
  },
  {
    "Question" : "Non-Overlapping Intervals",
    "Categorie" : "Intervals",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0435-non-overlapping-intervals.py",
    "Prompt": " "
  },
  {
    "Question" : "Meeting Rooms",
    "Categorie" : "Intervals",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0252-meeting-rooms.py",
    "Prompt": " "
  },
  {
    "Question" : "Meeting Rooms II",
    "Categorie" : "Intervals",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0253-meeting-rooms-ii.py",
    "Prompt": " "
  },
  {
    "Question" : "Minimum Interval to Include Each Query",
    "Categorie" : "Intervals",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1851-minimum-interval-to-include-each-query.py",
    "Prompt": " "
  },
  {
    "Question" : "Rotate Image",
    "Categorie" : "Math & Geometery",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0048-rotate-image.py",
    "Prompt": " "
  },
  {
    "Question" : "Spiral Matrix",
    "Categorie" : "Math & Geometery",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0054-spiral-matrix.py",
    "Prompt": " "
  },
  {
    "Question" : "Set Matrix Zeros",
    "Categorie" : "Math & Geometery",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0073-set-matrix-zeroes.py",
    "Prompt": " "
  },
  {
    "Question" : "Happy Number",
    "Categorie" : "Math & Geometery",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0202-happy-number.py",
    "Prompt": " "
  },
  {
    "Question" : "Plus One",
    "Categorie" : "Math & Geometery",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0066-plus-one.py",
    "Prompt": " "
  },
  {
    "Question" : "Pow(x,n)",
    "Categorie" : "Math & Geometery",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0050-powx-n.py",
    "Prompt": " "
  },
  {
    "Question" : "Multiply Strings",
    "Categorie" : "Math & Geometery",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0043-multiply-strings.py",
    "Prompt": " "
  },
  {
    "Question" : "Detect Squares",
    "Categorie" : "Math & Geometery",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/2013-detect-squares.py",
    "Prompt": " "
  },
  {
    "Question" : "Single Number",
    "Categorie" : "Bit Manipulation",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0136-single-number.py",
    "Prompt": " "
  },
  {
    "Question" : "Number of 1 Bits",
    "Categorie" : "Bit Manipulation",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0191-number-of-1-bits.py",
    "Prompt": " "
  },
  {
    "Question" : "Counting Bits",
    "Categorie" : "Bit Manipulation",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0338-counting-bits.py",
    "Prompt": " "
  },
  {
    "Question" : "Reverse Bits",
    "Categorie" : "Bit Manipulation",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0190-reverse-bits.py",
    "Prompt": " "
  },
  {
    "Question" : "Missing Number",
    "Categorie" : "Bit Manipulation",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0268-missing-number.py",
    "Prompt": " "
  },
  {
    "Question" : "Sum of Two Integers",
    "Categorie" : "Bit Manipulation",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0371-sum-of-two-integers.py",
    "Prompt": " "
  },
  {
    "Question" : "Reverse Integer",
    "Categorie" : "Bit Manipulation",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0007-reverse-integer.py",
    "Prompt": " "
  },
  {
    "Question" : "Maxium Number of Balloons",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1189-Maximum-Number-of-Balloons.py",
    "Prompt": " "
  },
  {
    "Question" : "Find all Numbers Disappeared in an Array",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0448-find-all-numbers-disappeared-in-an-array.py",
    "Prompt": " "
  },
  {
    "Question" : "Next Greater Element I",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0496-next-greater-element-i.py",
    "Prompt": " "
  },
  {
    "Question" : "Grid Game",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/2017-grid-game.py",
    "Prompt": " "
  },
  {
    "Question" : "Find All Anagrams In a String",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0438-find-all-anagrams-in-a-string.py",
    "Prompt": " "
  },
  {
    "Question" : "Find The Index of The First Occurrence In a String",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0028-find-the-index-of-the-first-occurrence-in-a-string.py",
    "Prompt": " "
  },
  {
    "Question" : "Continuous Subarray Sum",
    "Categorie" : "Arrays and Hashing",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0523-continuous-subarray-sum.py",
    "Prompt": " "
  },
  {
    "Question" : "4Sum",
    "Categorie" : "Two Pointers",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0018-4sum.py",
    "Prompt": " "
  },
  {
    "Question" : "Move Zeros",
    "Categorie" : "Two Pointers",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0283-move-zeroes.py",
    "Prompt": " "
  },
  {
    "Question" : "Merge Sorted Array",
    "Categorie" : "Two Pointers",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0088-merge-sorted-array.py",
    "Prompt": " "
  },
  {
    "Question" : "Find K Closest Elements",
    "Categorie" : "Sliding Window",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0658-find-k-closest-elements.py",
    "Prompt": " "
  },
  {
    "Question" : "Simplify Path",
    "Categorie" : "Stack",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0071-simplify-path.py",
    "Prompt": " "
  },
  {
    "Question" : "Decode String",
    "Categorie" : "Stack",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0394-decode-string.py",
    "Prompt": " "
  },
  {
    "Question" : "Remove All Adjacent Duplicates In String II",
    "Categorie" : "Stack",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1209-remove-all-adjacent-duplicates-in-string-ii.py",
    "Prompt": " "
  },
  {
    "Question" : "Online Stock Span",
    "Categorie" : "Stack",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0901-online-stock-span.py",
    "Prompt": " "
  },
  {
    "Question" : "Split Array Largest Sum",
    "Categorie" : "Binary Search",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0410-split-array-largest-sum.py",
    "Prompt": " "
  },
  {
    "Question" : "Search In Rotated Sorted Array",
    "Categorie" : "Binary Search",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0033-search-in-rotated-sorted-array.py",
    "Prompt": " "

  },
  {
    "Question" : "Find Minimum In Rotated Sorted Array",
    "Categorie" : "Binary Search",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0153-find-minimum-in-rotated-sorted-array.py",
    "Prompt": " "

  },
  {
    "Question" : "Guess Number Higher Or Lower",
    "Categorie" : "Binary Search",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0374-guess-number-higher-or-lower.py",
    "Prompt": " "

  },
  {
    "Question" : "Linked List Cycle",
    "Categorie" : "Linked List",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0141-linked-list-cycle.py",
    "Prompt": " "

  },
  {
    "Question" : "Swap Nodes In Pairs",
    "Categorie" : "Linked List",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0024-swap-nodes-in-pairs.py",
    "Prompt": " "

  },
  {
    "Question" : "Reverse Linked List II",
    "Categorie" : "Linked List",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0092-reverse-linked-list-ii.py",
    "Prompt": " "

  },
  {
    "Question" : "Intersection of Two Linked Lists",
    "Categorie" : "Linked List",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0160-intersection-of-two-linked-lists.py",
    "Prompt": " "

  },
  {
    "Question" : "Reverse Nodes In K Group",
    "Categorie" : "Linked List",
    "Difficulty": "Hard",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0025-reverse-nodes-in-k-group.py",
    "Prompt": " "

  },
  {
    "Question" : "Diameter of Binary Tree",
    "Categorie" : "Trees",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0543-diameter-of-binary-tree.py",
    "Prompt": " "

  },
  {
    "Question" : "Merge Two Binary Trees",
    "Categorie" : "Trees",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0617-merge-two-binary-trees.py",
    "Prompt": " "

  },
  {
    "Question" : "Path Sum",
    "Categorie" : "Trees",
    "Difficulty": "Easy",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0064-minimum-path-sum.py",
    "Prompt": " "

  },
  {
    "Question" : "Count Good Nodes In Binary Tree",
    "Categorie" : "Trees",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1448-count-good-nodes-in-binary-tree.py",
    "Prompt": " "

  },
  {
    "Question" : "Validate Binary Search Tree",
    "Categorie" : "Trees",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0098-validate-binary-search-tree.py",
    "Prompt": " "

  },
  {
    "Question" : "Construct Binary Tree From Preorder And Inorder Traversal",
    "Categorie" : "Trees",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0105-construct-binary-tree-from-preorder-and-inorder-traversal.py",
    "Prompt": " "

  },
  {
    "Question" : "K Closest Points to Origin",
    "Categorie" : "Heap",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0973-k-closest-points-to-origin.py",
    "Prompt": " "

  },
  {
    "Question" : "Kth Largest Element In An Array",
    "Categorie" : "Heap",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0215-kth-largest-element-in-an-array.py",
    "Prompt": " "

  },
  {
    "Question" : "Seat Reservation Manager",
    "Categorie" : "Heap",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1845-seat-reservation-manager.py",
    "Prompt": " "

  },
  {
    "Question" : "Find The Kth Largest Integer In The Array",
    "Categorie" : "Heap",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/1985-find-the-kth-largest-integer-in-the-array.py",
    "Prompt": " "

  },
  {
    "Question" : "Reorganize String",
    "Categorie" : "Heap",
    "Difficulty": "Medium",
    "Solution": "https://github.com/neetcode-gh/leetcode/blob/main/python/0767-reorganize-string.py",
    "Prompt": " "

  }
]
